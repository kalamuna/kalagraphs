<?php

/**
 * @file
 * Contains kalagraphs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Render\Element;

const KALAGRAPHS_TYPES = [
  'section_header' => [
    'title' => 'Section Header',
    'namespace' => 'molecules',
    'base' => 'paragraph',
  ],
  'icon' => [
    'title' => 'Icon',
    'namespace' => 'molecules',
    'subdirectory' => 'blocks',
    'base' => 'paragraph',
  ],
  'image_left' => [
    'title' => 'Image Left',
    'namespace' => 'molecules',
    'subdirectory' => 'blocks',
    'base' => 'paragraph',
  ],
  'image_right' => [
    'title' => 'Image Right',
    'namespace' => 'molecules',
    'subdirectory' => 'blocks',
    'base' => 'paragraph',
  ],
  'triangle_flow' => [
    'title' => 'Triangle Flow',
    'namespace' => 'organisms',
    'base' => 'paragraph',
  ],
];

/**
 * Implements hook_help().
 */
function kalagraphs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the kalagraphs module.
    case 'help.page.kalagraphs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Kalagraphs provides a flexible Paragraph type called &quot;Components&quot; that allows editors to choose with which Twig template it will be rendered.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph().
 */
function kalagraphs_preprocess_paragraph(&$vars) {

  // Only run on the special Paragraphs bundle.
  if ('kalagraphs_component' !== $vars['paragraph']->bundle()) {
    return;
  }

  // Add a flag to indicate it is rendering in a Drupal context.
  $vars['drupal'] = TRUE;

  // Map field items to template variables.
  foreach (['title', 'text', 'image', 'links'] as $field) {
    $content = &$vars['content']["field_kalagraphs_$field"];
    if (!empty($content)) {
      foreach (Element::children($content) as $index) {
        $item = $content[$index];
        $vars[$field][] = $item;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function kalagraphs_theme() {
  $hooks['kalagraphs_basic_link'] = [
    'template' => 'basic_link',
    'path' => '@atoms/basic_link',
    'variables' => [
      'href' => '#',
      'classList' => '',
      'text' => t('Get Started'),
    ],
  ];

  $hooks['kalagraphs_cta_link'] = [
    'template' => 'link',
    'path' => '@atoms/cta/link',
    'variables' => [
      'href' => '#',
      'classList' => '',
      'text' => t('Get Started'),
    ],
  ];

  $hooks['kalagraphs_basic_image'] = [
    'template' => 'basic_image',
    'path' => '@atoms/basic_image',
    'variables' => [
      'src' => '',
      'alt' => '',
      'class' => '',
    ],
  ];

  // foreach (KALAGRAPHS_TYPES as $type => $info) {
  //   $hook = &$hooks["kalagraphs_$type"];
  //   if (isset($info['base'])) {
  //     $hook['base hook'] = $info['base'];
  //   }
  //   if (isset($info['vars'])) {
  //     $hook['variables'] = $info['vars'];
  //   }
  //   $hook['template'] = $type;
  //   $path = "@{$info['namespace']}";
  //   if (!empty($info['subdirectory'])) {
  //     $path .= "/{$info['subdirectory']}";
  //   }
  //   $hook['path'] = "$path/$type";
  // }

  return $hooks;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Adds theme hooks for various Twig templates.
 */
function kalagraphs_theme_registry_alter(&$theme_registry) {
  foreach (KALAGRAPHS_TYPES as $type => $info) {
    $hook = &$theme_registry["kalagraphs_$type"];
    $hook = $theme_registry[$info['base']];
    $hook['template'] = $type;
    $path = "@{$info['namespace']}";
    if (!empty($info['subdirectory'])) {
      $path .= "/{$info['subdirectory']}";
    }
    $hook['path'] = "$path/$type";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for paragraph().
 */
function kalagraphs_theme_suggestions_paragraph_alter(array &$suggestions, array $vars) {
  $paragraph = $vars['elements']['#paragraph'];
  $suggestions[] = "kalagraphs_{$paragraph->field_kalagraphs_type->value}";
}

/**
 * Returns the allowed values for the "Kalagraphs Type" options list field.
 *
 * @see callback_allowed_values_function()
 */
function _kalagraphs_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $options = [];
  foreach (KALAGRAPHS_TYPES as $type => $info) {
    $options[$type] = $info['title'];
  }
  return $options;
}
