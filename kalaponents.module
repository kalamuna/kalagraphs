<?php

/**
 * @file
 * Code for the Kalamuna Components feature.
 */

include_once 'kalaponents.features.inc';

// Define the "Component Type" field name.
const KALAPONENTS_FIELD_NAME = 'field_component_type';

/**
 * Implements hook_menu().
 */
function kalaponents_menu() {
  $items['admin/config/development/kalaponents'] = array(
    'title' => 'Kalaponents',
    'description' => 'Kalamuna Components configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kalaponents_types_form'),
    'access arguments' => array('administer themes'),
  );
  $items['admin/config/development/kalaponents/types'] = array(
    'title' => 'Component types',
    'description' => 'Define kalaponent types.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/development/kalaponents/fields'] = array(
    'title' => 'Field configuration',
    'description' => 'Define fields and icons for each kalaponent type.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kalaponents_fields_form'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * Allow this module to override the theme hook for a specific Paragraphs type.
 */
function kalaponents_theme($existing, $type, $theme, $path) {
  return array(
    'paragraphs_item__component__full' => array(
      'base hook' => 'paragraphs_item',
    ),
  );
}

/**
 * Theme implementation for "Components" Paragraphs items' "full" viewmode.
 *
 * @TODO Fix moving this function to .theme.inc. When I specify the "file" key
 * in the hook_theme() implementation above, the file only gets included on
 * initial page load after cache clear and not on subsequent page loads.
 */
function theme_paragraphs_item__component__full(&$vars) {
  $entity_type    = 'paragraphs_item';
  $paragraph      = entity_metadata_wrapper($entity_type, $vars[$entity_type]);
  $component_type = $paragraph->{KALAPONENTS_FIELD_NAME}->value();
  return twigshim_render_entity($entity_type, $paragraph, "$component_type.twig");
}

/**
 * Returns the list of component types keyed by machine name.
 */
function kalaponents_get_types() {
  static $types;
  if (!isset($types)) {
    $types = array();
    $rows  = explode("\n", variable_get('kalaponents_types', ''));
    foreach ($rows as $row) {
      $columns = explode('|', $row);
      $types[reset($columns)] = next($columns);
    }
  }
  return $types;
}

/**
 * Implements hook_cron().
 */
function kalaponents_cron() {
  _kalaponents_backport_composite_variables();
  _kalaponents_set_allowed_values();
}

/**
 * Syncs composite values back into their individual child variables.
 *
 * When the composite variable gets updated via Features or other methods, we
 * need a way to keep its child variables in sync.
 */
function _kalaponents_backport_composite_variables() {
  foreach (_kalaponents_get_composite_variables() as $parent => $composite_name) {
    $composite = variable_get($composite_name, array());
    foreach ($composite as $type => $values) {
      $child = variable_get_child($parent, $type);
      if (isset($composite[$type])) {
        variable_set($child['name'], $composite[$type]);
      }
      else {
        variable_del($child['name']);
      }
    }
  }
}

/**
 * Returns the list of kalaponents composite variables.
 */
function _kalaponents_get_composite_variables() {
  static $composites;
  if (!isset($composites)) {
    $composites = array();
    module_load_include('inc', 'variable');
    foreach (variable_list_module('kalaponents') as $variable => $info) {
      if (isset($info['kalaponents composite'])) {
        $composites[$variable] = $info['kalaponents composite'];
      }
    }
  }
  return $composites;
}

/**
 * Updates the "Component Type" field's "allowed options" list with the latest.
 */
function _kalaponents_set_allowed_values() {

  // Get the list of component icons, keyed by component type.
  $icons = variable_get('kalaponents_composite_icons', array());

  // Get the field info.
  $info = field_info_field(KALAPONENTS_FIELD_NAME);

  // Get a reference to the allowed options, and truncate it.
  $options = &$info['settings']['allowed_values'];
  $options = array();

  // Iterate over each component type.
  foreach (kalaponents_get_types() as $type => $name) {

    // Look up the icon for this component type.
    $icon = $icons[$type];

    // Add this component type to the options list.
    $options[$type] = "<img width='20px' height='20px' style='vertical-align:bottom' src=/$icon> $name";
  }

  // Save the new field options.
  field_update_field($info);
}

/**
 * Returns the list of available component fields, keyed by machine name.
 */
function kalaponents_get_available_fields() {
  static $fields;
  if (!isset($fields)) {
    $fields  = array();
    $weights = array();
    foreach (field_info_instances('paragraphs_item', 'component') as $field => $info) {

      // Skip meta / non-content fields.
      if ($field === 'field_component_type'||
          $field === 'field_component_label') {
        continue;
      }

      // Get the edit form weight for this field.
      $weight = &$info['display']['default']['weight'];
      $weights[$field] = empty($weight) ? 0 : $weight;

      // Include the machine name in display.
      $template_variable_name = substr($field, 16);
      $fields[$field] = "{$info['label']} ($template_variable_name)";
    }
    // Sort fields by position on the edit form.
    array_multisort($weights, SORT_ASC, $fields);
  }
  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function kalaponents_form_page_node_form_alter(&$form, &$form_state, $form_id) {

  // Get the field states for each component type.
  foreach (array_keys(kalaponents_get_available_fields()) as $field) {
    $field_states[$field][] = array('value' => -1);
    foreach (variable_get('kalaponents_composite_fields', array()) as $type => $fields) {
      if (in_array($field, array_values(array_filter($fields)))) {
        $field_states[$field][] = array('value' => $type);
      }
    }
  }

  // Make shortcut variables to facilitate cleaner code below.
  $und     = LANGUAGE_NONE;
  $chooser = KALAPONENTS_FIELD_NAME;

  // Update conditional states for each Paragraphs Item entity on this node.
  foreach ($form['field_paragraphs'][LANGUAGE_NONE] as $index => &$paragraph) {

    // Skip metadata in the form element and only act on "Component" paragraphs.
    if (!is_numeric($index) || 'component' !== $paragraph['#bundle']) {
      continue;
    }

    // Remove the "Paragraph type:" message from the top of each paragraph.
    unset($paragraph['paragraph_bundle_title']);

    // Set field states for each field in the Paragraphs Item.
    foreach ($field_states as $field => $states) {
      $selector = ":input[name='field_paragraphs[$und][$index][$chooser][$und]']";
      $paragraph[$field]['#states']['visible'][$selector] = $states;
    }
  }
}

/**
 * Form callback for the kalaponents "Comopnent Types" settings form.
 */
function kalaponents_types_form($form, &$form_state) {

  // Add a help message.
  $form['kalaponents_help'] = array(
    '#type' => 'markup',
    '#weight' => -1,
    '#markup' => t('After making changes to this list component types, head over to the <a href="@path">Field Configuration</a> page to specify additional settings →', array('@path' => '/admin/config/development/kalaponents/fields')),
  );

  // Add the Variable module's edit form.
  $form += variable_edit_form($form, $form_state, 'kalaponents_types');

  // Add a submit handler.
  $form['#submit'][] = 'kalaponents_fields_form_submit';
  $form['#submit'][] = 'kalaponents_types_form_submit';

  // Return the form array.
  return $form;
}

/**
 * Form callback for the kalaponents "Field Configuration" settings form.
 */
function kalaponents_fields_form($form, &$form_state) {

  // Add a help message.
  $form['kalaponents_help'] = array(
    '#type' => 'markup',
    '#weight' => -1,
    '#markup' => t('← To add or remove component types, head over to the <a href="@path">Component Types</a> page.', array('@path' => '/admin/config/development/kalaponents/types')),
  );

  // Get the list of kalaponents variables.
  module_load_include('inc', 'variable');
  $variables = variable_list_module('kalaponents');

  // Remove the variable displayed on the main settings page.
  unset($variables['kalaponents_types']);

  // Add the Variable module's edit form.
  $form += variable_edit_form($form, $form_state, array_keys($variables));

  // Add a custom submit handler.
  $form['#submit'][] = 'kalaponents_fields_form_submit';

  // Return the form array.
  return $form;
}

/**
 * Generic form submit callback for Kalaponents admin settings forms.
 */
function kalaponents_fields_form_submit($form, &$form_state) {

  // Update the "Component Types" field's list of allowed values.
  _kalaponents_set_allowed_values();
}

/**
 * Form submit callback for the Component Types settings form.
 */
function kalaponents_types_form_submit($form, &$form_state) {

  // Redirect to the "Field Configuration" form.
  $form_state['redirect'] = '/admin/config/development/kalaponents/fields';
}

/**
 * Implements hook_variable_update().
 *
 * Updates our composite variables with the changes to the child variable.
 */
function kalaponents_variable_update($name, $value, $old_value, $options) {
  $child = _variable_variable($name);
  if (isset($child['parent'])) {
    $parent = _variable_variable($child['parent']);
    if (isset($parent['kalaponents composite'])) {
      $composite_name   = $parent['kalaponents composite'];
      $composite        = variable_get($composite_name, array());
      $type             = $child['index'];
      $composite[$type] = $value;
      variable_set($composite_name, $composite);
    }
  }
}

/**
 * Implements hook_variable_delete().
 *
 * @TODO When variables are deleted, remove them from the composite variables.
 */
function kalaponents_variable_delete($variable, $options) {
}
