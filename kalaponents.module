<?php

/**
 * @file
 * Code for the Kalamuna Components feature.
 */

/**
 * Implements hook_menu().
 */
function kalaponents_menu() {
  $items['admin/config/development/kalaponents'] = array(
    'title' => 'Kalaponents',
    'description' => 'Kalamuna Components configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kalaponents_types_form'),
    'access arguments' => array('administer themes'),
  );
  $items['admin/config/development/kalaponents/types'] = array(
    'title' => 'Component types',
    'description' => 'Define kalaponent types.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/development/kalaponents/configure'] = array(
    'title' => 'Configuration',
    'description' => 'Define fields and icons for each kalaponent type.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kalaponents_configuration_form'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * Allow this module to override the theme hook for a specific Paragraphs type.
 */
function kalaponents_theme($existing, $type, $theme, $path) {
  return array(
    'paragraphs_item__kalaponent__full' => array(
      'base hook' => 'paragraphs_item',
    ),
  );
}

/**
 * Theme implementation for "Kalaponent" Paragraphs items' "full" viewmode.
 *
 * @TODO Fix moving this function to .theme.inc. When I specify the "file" key
 * in the hook_theme() implementation above, the file only gets included on
 * initial page load after cache clear and not on subsequent page loads.
 */
function theme_paragraphs_item__kalaponent__full(&$vars) {

  // Extract field data from the Paragraphs Item and stuff them into an array of
  // variables for the template to use.
  $entity_type    = 'paragraphs_item';
  $paragraph      = entity_metadata_wrapper($entity_type, $vars[$entity_type]);
  $component_type = $paragraph->field_kalaponents_type->value();
  $template_path  = variable_get("kalaponents_template_$component_type", $component_type);
  $variables      = array();

  foreach (array_filter(variable_get("kalaponents_fieldlist_$component_type", array())) as $field) {
    switch ($field) {

      // Title field.
      case 'field_kalaponents_title':
        $variable = 'title';
        $value    = $paragraph->$field->value();
        break;

      // Sanitized HTML markup from WYSIWYG.
      case 'field_kalaponents_text':
        $variable = 'body';
        $value    = $paragraph->$field->value->value();
        break;

      // Full url to image.
      case 'field_kalaponents_image':
        $variable = 'image';
        $value    = file_create_url($paragraph->$field->file->value()->uri);
        break;

      // Link text and url as separate variables.
      case 'field_kalaponents_link':
        $variables['link_text'] = $paragraph->$field->url->value();
        $variables['link_href'] = $paragraph->$field->title->value();
        break;
    }
    if ($variable) {
      $variables[$variable] = $value;
      unset($variable);
    }
  }

  return
    '<section class="container">' .
      twigshim_render("$template_path.html.twig", $variables) .
    '<section>';
}

/**
 * Implements hook_cron().
 *
 * Backports the composite variables into their component variables.
 */
function kalaponents_cron() {
  _kalaponents_sync_composites();
}

/**
 * Implements hook_flush_caches().
 *
 * Backports the composite variables into their component variables.
 */
function kalaponents_flush_caches() {
  drupal_register_shutdown_function('_kalaponents_sync_composites');
  return array();
}

/**
 * Syncs composite values back into their individual child variables.
 *
 * When the composite variable gets updated via Features or other methods, we
 * need a way to keep its child variables in sync.
 */
function _kalaponents_sync_composites() {

  // Iterate over each "composite" variable.
  module_load_include('inc', 'kalaponents');
  foreach (_kalaponents_get_composite_variable() as $parent => $composite) {

    // Get the array of inidivual component "child" values for this composite.
    $composite_values = variable_get($composite, array());

    // Get the "LIKE" search string to find all the child variables of this
    // composite currently in the database.
    $search = preg_replace('/\[\w+\]/', '%', $parent);

    // Iterate over each child of this composite currently in the database.
    $children = db_select('variable', 'v')
      ->fields('v', array('name'))
      ->condition('name', $search, 'LIKE')
      ->execute()
      ->fetchCol();
    foreach ($children as $child) {

      // Determine the component type.
      $child_info     = variable_build($child);
      $component_type = $child_info['index'];

      // Update the child value.
      if (isset($composite_values[$child])) {
        variable_set($child, $composite_values[$child]);
      }

      // Delete the child variable if it no longer exists.
      else {
        variable_del($child);
      }

      // Remove this child from our local copy of the composite values so we
      // know it has been processed.
      unset($composite_values[$child]);
    }

    // Add any remaining variables.
    foreach ($composite_values as $child => $value) {
      variable_set($child, $value);
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for paragraphs_embed().
 */
function kalaponents_field_widget_paragraphs_embed_form_alter(&$element, &$form_state, $context) {

  // Build the field states for each component type.
  $field_states = &drupal_static(__FUNCTION__);
  if (!isset($field_states)) {
    module_load_include('variable.inc', 'kalaponents');
    foreach (array_keys(kalaponents_get_available_fields()) as $field) {
      // Keep fields from always showing when they aren't used by any component.
      $field_states[$field][] = array('value' => -1);
      foreach (variable_get('kalaponents_fieldlists', array()) as $type => $fieldlist) {
        if (in_array($field, array_values(array_filter($fieldlist)))) {
          $field_states[$field][] = array('value' => $type);
        }
      }
    }
  }

  // Make shortcut variables to facilitate cleaner code below.
  $field_name = $element['#field_name'];
  $und        = LANGUAGE_NONE;

  // Update conditional states for each Paragraphs Item entity on this node.
  for ($delta = 0; $delta <= $element['#max_delta']; $delta++) {

    // Get a reference to this Paragraphs Item form element.
    $paragraph = &$element[$delta];

    // Only for "Kalaponent" paragraph items.
    if ('kalaponent' !== $paragraph['#bundle']) {
      continue;
    }

    // Remove the "Paragraph type:" message from the top of each paragraph.
    unset($paragraph['paragraph_bundle_title']);

    // Set field states for each field in the Paragraphs Item.
    foreach ($field_states as $field => $states) {
      $selector = ":input[name='{$field_name}[$und][$delta][field_kalaponents_type][$und]']";
      $paragraph[$field]['#states']['visible'][$selector] = $states;
    }
  }
}

/**
 * Returns the options for the "Component Type" radios.
 */
function kalaponents_get_type_options() {

  // Get the list of component icons, keyed by component type, for use below.
  $icons = array_filter(variable_get('kalaponents_icons', array()));

  // Build the options list.
  $options = array();
  module_load_include('variable.inc', 'kalaponents');
  foreach (kalaponents_get_types() as $type => $name) {
    $options[$type] = isset($icons[$type])
      ? "<img width='20px' height='20px' style='vertical-align:bottom' src=/{$icons[$type]}> $name"
      : $name;
  }

  return $options;
}

/**
 * Form callback for the kalaponents "Comopnent Types" settings form.
 */
function kalaponents_types_form($form, &$form_state) {

  // Add a help message.
  $form['kalaponents_help'] = array(
    '#type' => 'markup',
    '#weight' => -1,
    '#markup' => t('After making changes to this list of component types, head over to the <a href="@path">Configuration</a> page to specify additional settings →', array('@path' => '/admin/config/development/kalaponents/configure')),
  );

  // Add the Variable module's edit form.
  $variable = 'kalaponents_types';
  $form    += variable_edit_form($form, $form_state, $variable);

  // Trim whitespace, provide one blank line, and add height to the textarea.
  $element = &$form[$variable];
  $element['#default_value'] = trim($element['#default_value']) . PHP_EOL;
  $element['#rows'] = substr_count($element['#default_value'], PHP_EOL) + 5;

  // Add a submit handler.
  $form['#submit'][] = 'kalaponents_types_form_submit';

  // Return the form array.
  return $form;
}

/**
 * Form submit callback for the Component Types settings form.
 *
 * Redirects user to the "Field Configuration" form after submit.
 */
function kalaponents_types_form_submit($form, &$form_state) {
  $form_state['redirect'] = '/admin/config/development/kalaponents/configure';
}

/**
 * Form callback for the kalaponents "Configuration" settings form.
 */
function kalaponents_configuration_form($form, &$form_state) {

  // Add a help message.
  $form['kalaponents_help'] = array(
    '#type' => 'markup',
    '#weight' => -1,
    '#markup' => t('← To add or remove component types, head over to the <a href="@path">Component Types</a> page.', array('@path' => '/admin/config/development/kalaponents/types')),
  );

  // Create a button to reset the "Kalaponent" paragraph's field configuration.
  $form['kalaponents_reset_fields'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Reset bundle fields'),
    'markup' => array(
      '#type' => 'markup',
      '#markup' => t("<p>Reset the <em>Kalaponent</em> Paragraph type's <a href='@path'>field configuration</a> to its default settings. This is useful when you accidentally made changes or want to pull in updates from the Kalaponents codebase. If any irreversible modifications were made to the field configurations, such as changing a list field's <em>allowed values</em>, then this process will fail. To fix it, delete the field in question and try this reset again.</p>", array('@path' => '/admin/structure/paragraphs/kalaponent/fields')),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Reset'),
      '#submit' => array('kalaponents_reset_fields_form_submit'),
    ),
  );

  // Get the list of kalaponents variables.
  module_load_include('inc', 'variable');
  $variables = variable_list_module('kalaponents');

  // Remove the variable displayed on the main settings page.
  unset($variables['kalaponents_types']);

  // Add the Variable module's edit form.
  $form += variable_edit_form($form, $form_state, array_keys($variables));

  // Return the form array.
  return $form;
}

/**
 * Form submit callback to reset the "Kalaponent" paragraph's field config.
 */
function kalaponents_reset_fields_form_submit($form, &$form_state) {
  module_load_include('inc', 'kalaponents');
  _kalaponents_revert_fields();
}

/**
 * Implements hook_variable_update().
 *
 * Updates our composite variables with the changes to child variables.
 */
function kalaponents_variable_update($name, $value, $old_value, $options) {
  if ('kalaponents_types' === $name) {
    module_load_include('inc', 'kalaponents');
    $types = kalaponents_get_types();
    foreach (_kalaponents_get_composite_variable() as $composite_name) {

      // Get the current value of the composite variable.
      $composite = variable_get($composite_name, array());

      // Remove entries that are no longer valid.
      $composite = array_intersect_key($composite, $types);

      // Update the composite variable.
      variable_set($composite_name, $composite);
    }
    return;
  }
  $child = _variable_variable($name);
  if (isset($child['parent'])) {
    $parent = _variable_variable($child['parent']);
    if (isset($parent['kalaponents composite'])) {
      $composite_name   = $parent['kalaponents composite'];
      $composite        = variable_get($composite_name, array());
      $type             = $child['index'];
      $composite[$type] = $value;
      variable_set($composite_name, $composite);
    }
  }
}
